#!/usr/bin/env node

/**
 * üß™ Fakelit.com - Multi-Gateway Payment System Test
 * Test NMI and Stripe payment processing integration
 * Powered by: Fakelit.com
 */

const fs = require('fs').promises;
const FakelitUnifiedPaymentService = require('./services/unifiedPaymentService');

class MultiGatewayPaymentTest {
    constructor() {
        this.configFile = 'fakelit-auto-scaling-config.json';
    }

    async runTest() {
        console.log('üß™ Fakelit.com - Multi-Gateway Payment System Test');
        console.log('=================================================');
        console.log('üè¢ Powered by: Fakelit.com');
        console.log('üí≥ Testing NMI + Stripe Payment Integration');
        console.log('');

        try {
            await this.testConfiguration();
            await this.testPaymentServices();
            await this.testGatewayConnections();
            await this.testCostCalculations();
            await this.testTerminalIntegration();
            await this.showPaymentFeatures();
        } catch (error) {
            console.error('‚ùå Multi-gateway payment test failed:', error.message);
        }
    }

    async testConfiguration() {
        console.log('üìã Testing Multi-Gateway Configuration...');
        console.log('==========================================');
        
        try {
            const configData = await fs.readFile(this.configFile, 'utf8');
            const config = JSON.parse(configData);
            
            console.log('‚úÖ Configuration file found');
            
            if (config.payment) {
                console.log('‚úÖ Payment configuration found');
                console.log(`üéØ Default Gateway: ${config.payment.defaultGateway.toUpperCase()}`);
                
                // Test NMI configuration
                if (config.payment.gateways.nmi.enabled) {
                    console.log('‚úÖ NMI Gateway: Enabled');
                    console.log(`   üí∞ Currency: ${config.payment.gateways.nmi.currency.toUpperCase()}`);
                    console.log(`   üåê Environment: ${config.payment.gateways.nmi.environment}`);
                    console.log(`   üìä Base Price: $${config.payment.gateways.nmi.scalingPricing.basePrice}`);
                    console.log(`   üè™ Per Site Price: $${config.payment.gateways.nmi.scalingPricing.perSitePrice}`);
                    console.log(`   ‚ö° Scaling Fee: $${config.payment.gateways.nmi.scalingPricing.scalingFee}`);
                } else {
                    console.log('‚ö†Ô∏è  NMI Gateway: Disabled');
                }
                
                // Test Stripe configuration
                if (config.payment.gateways.stripe.enabled) {
                    console.log('‚úÖ Stripe Gateway: Enabled');
                    console.log(`   üí∞ Currency: ${config.payment.gateways.stripe.currency.toUpperCase()}`);
                    console.log(`   üìä Base Price: $${config.payment.gateways.stripe.scalingPricing.basePrice}`);
                    console.log(`   üè™ Per Site Price: $${config.payment.gateways.stripe.scalingPricing.perSitePrice}`);
                    console.log(`   ‚ö° Scaling Fee: $${config.payment.gateways.stripe.scalingPricing.scalingFee}`);
                } else {
                    console.log('‚ö†Ô∏è  Stripe Gateway: Disabled');
                }
                
                // Test terminal configuration
                if (config.payment.terminals.enabled) {
                    console.log('‚úÖ Terminal Integration: Enabled');
                    console.log(`   üè™ Available Terminals: ${config.payment.terminals.nmiTerminals.length}`);
                    config.payment.terminals.nmiTerminals.forEach(terminal => {
                        console.log(`     - ${terminal.name} (${terminal.location}) - ${terminal.status}`);
                    });
                } else {
                    console.log('‚ö†Ô∏è  Terminal Integration: Disabled');
                }
                
            } else {
                console.log('‚ö†Ô∏è  No payment configuration found');
            }
            
        } catch (error) {
            console.error('‚ùå Configuration test failed:', error.message);
            throw error;
        }
    }

    async testPaymentServices() {
        console.log('\nüí≥ Testing Payment Services...');
        console.log('=============================');
        
        try {
            const configData = await fs.readFile(this.configFile, 'utf8');
            const config = JSON.parse(configData);
            
            if (!config.payment) {
                console.log('‚ö†Ô∏è  Skipping payment service test (no payment config)');
                return;
            }
            
            const paymentService = new FakelitUnifiedPaymentService(config);
            console.log('‚úÖ Unified payment service initialized successfully');
            
            // Get available gateways
            const gateways = await paymentService.getAvailableGateways();
            console.log(`üîÑ Available Gateways: ${gateways.length}`);
            
            gateways.forEach(gateway => {
                console.log(`   ‚úÖ ${gateway.name} (${gateway.id})`);
                console.log(`      Features: ${gateway.features.join(', ')}`);
                if (gateway.terminals) {
                    console.log(`      üè™ Terminals: Available`);
                }
            });
            
        } catch (error) {
            console.error('‚ùå Payment service test failed:', error.message);
        }
    }

    async testGatewayConnections() {
        console.log('\nüîó Testing Gateway Connections...');
        console.log('================================');
        
        try {
            const configData = await fs.readFile(this.configFile, 'utf8');
            const config = JSON.parse(configData);
            
            if (!config.payment) {
                console.log('‚ö†Ô∏è  Skipping gateway connection test (no payment config)');
                return;
            }
            
            const paymentService = new FakelitUnifiedPaymentService(config);
            
            // Test NMI connection
            if (config.payment.gateways.nmi.enabled) {
                console.log('üîç Testing NMI connection...');
                const nmiConnected = await paymentService.testGatewayConnection('nmi');
                if (nmiConnected) {
                    console.log('‚úÖ NMI connection successful');
                } else {
                    console.log('‚ö†Ô∏è  NMI connection failed (check credentials)');
                }
            }
            
            // Test Stripe connection
            if (config.payment.gateways.stripe.enabled) {
                console.log('üîç Testing Stripe connection...');
                const stripeConnected = await paymentService.testGatewayConnection('stripe');
                if (stripeConnected) {
                    console.log('‚úÖ Stripe connection successful');
                } else {
                    console.log('‚ö†Ô∏è  Stripe connection failed (check API key)');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Gateway connection test failed:', error.message);
        }
    }

    async testCostCalculations() {
        console.log('\nüí∞ Testing Cost Calculations...');
        console.log('==============================');
        
        try {
            const configData = await fs.readFile(this.configFile, 'utf8');
            const config = JSON.parse(configData);
            
            if (!config.payment) {
                console.log('‚ö†Ô∏è  Skipping cost calculation test (no payment config)');
                return;
            }
            
            const paymentService = new FakelitUnifiedPaymentService(config);
            
            // Test different scaling scenarios
            const scenarios = [
                { current: 50, target: 150, name: 'Standard Scaling' },
                { current: 45, target: 100, name: 'Partial Scaling' },
                { current: 100, target: 200, name: 'Large Scaling' }
            ];
            
            for (const scenario of scenarios) {
                const cost = await paymentService.calculateScalingCost(scenario.current, scenario.target);
                
                console.log(`\nüìä ${scenario.name}:`);
                console.log(`   Current Sites: ${cost.currentSites}`);
                console.log(`   Target Sites: ${cost.targetSites}`);
                console.log(`   Additional Sites: ${cost.additionalSites}`);
                console.log(`   Base Cost: $${cost.baseCost.toFixed(2)}`);
                console.log(`   Per Site Cost: $${cost.perSiteCost.toFixed(2)}`);
                console.log(`   Scaling Fee: $${cost.scalingFee.toFixed(2)}`);
                console.log(`   Total Cost: $${cost.totalCost.toFixed(2)} ${cost.currency.toUpperCase()}`);
            }
            
        } catch (error) {
            console.error('‚ùå Cost calculation test failed:', error.message);
        }
    }

    async testTerminalIntegration() {
        console.log('\nüè™ Testing Terminal Integration...');
        console.log('==================================');
        
        try {
            const configData = await fs.readFile(this.configFile, 'utf8');
            const config = JSON.parse(configData);
            
            if (!config.payment || !config.payment.terminals.enabled) {
                console.log('‚ö†Ô∏è  Skipping terminal test (terminals disabled)');
                return;
            }
            
            const paymentService = new FakelitUnifiedPaymentService(config);
            
            // Get available terminals
            const terminals = await paymentService.getTerminals();
            console.log(`üè™ Available Terminals: ${terminals.length}`);
            
            terminals.forEach(terminal => {
                console.log(`   üìç ${terminal.name} (${terminal.location})`);
                console.log(`      ID: ${terminal.id}`);
                console.log(`      Status: ${terminal.status}`);
            });
            
            if (terminals.length > 0) {
                console.log('\n‚úÖ Terminal integration working');
                console.log('üí≥ Terminals can be used for in-person payments');
            }
            
        } catch (error) {
            console.error('‚ùå Terminal integration test failed:', error.message);
        }
    }

    async showPaymentFeatures() {
        console.log('\nüöÄ Multi-Gateway Payment Features:');
        console.log('==================================');
        console.log('‚úÖ NMI Payment Gateway');
        console.log('   - Credit Card Processing');
        console.log('   - ACH Bank Transfers');
        console.log('   - Terminal Integration');
        console.log('   - Physical Card Readers');
        console.log('');
        console.log('‚úÖ Stripe Payment Gateway');
        console.log('   - Credit Card Processing');
        console.log('   - Digital Wallets (Apple Pay, Google Pay)');
        console.log('   - Bank Transfers');
        console.log('   - International Payments');
        console.log('');
        console.log('‚úÖ Unified Payment Processing');
        console.log('   - Automatic Gateway Selection');
        console.log('   - Fallback Payment Methods');
        console.log('   - Multi-Gateway Cost Calculation');
        console.log('   - Unified Payment Logging');
        console.log('');
        console.log('üí≥ Payment Flow Options:');
        console.log('1. Online Payment (NMI/Stripe)');
        console.log('2. Terminal Payment (NMI)');
        console.log('3. Automatic Gateway Selection');
        console.log('4. Manual Gateway Selection');
        console.log('');
        console.log('üõ°Ô∏è  Safety Features:');
        console.log('‚úÖ Automatic refunds if scaling fails');
        console.log('‚úÖ Multi-gateway error handling');
        console.log('‚úÖ Detailed payment logging');
        console.log('‚úÖ Gateway health monitoring');
        console.log('‚úÖ Terminal status tracking');
        console.log('');
        console.log('üè¢ Fakelit.com Benefits:');
        console.log('‚úÖ Offer multiple payment options to clients');
        console.log('‚úÖ Support both online and in-person payments');
        console.log('‚úÖ Provide terminal solutions for businesses');
        console.log('‚úÖ Flexible payment processing');
        console.log('‚úÖ Professional payment infrastructure');
    }
}

// Run the test
if (require.main === module) {
    const test = new MultiGatewayPaymentTest();
    test.runTest().catch(error => {
        console.error('‚ùå Multi-gateway payment test failed:', error.message);
        process.exit(1);
    });
}

module.exports = MultiGatewayPaymentTest; 